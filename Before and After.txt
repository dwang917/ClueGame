before:
private void checkDoorAdj(BoardCell cell) {
		char room = 0;
		int row = cell.getRow();
		int col = cell.getCol();
		switch(cell.getDoorDirection()) {
			case LEFT:
				//add door to the center's adjcentList and vice versa
				room = getCell(row,col-1).getInitial();	
				cell.addAdj(roomMap.get(room).getCenterCell());
				roomMap.get(room).getCenterCell().addAdj(cell);	
				break;
			case RIGHT:
				room = getCell(row,col+1).getInitial();
				cell.addAdj(roomMap.get(room).getCenterCell());
				roomMap.get(room).getCenterCell().addAdj(cell);
				break;
			case DOWN:
				room = getCell(row+1,col).getInitial();
				cell.addAdj(roomMap.get(room).getCenterCell());
				roomMap.get(room).getCenterCell().addAdj(cell);
				break;
			case UP:
				room = getCell(row-1,col).getInitial();
				cell.addAdj(roomMap.get(room).getCenterCell());
				roomMap.get(room).getCenterCell().addAdj(cell);
				break;
		}
	}
	
public void specialCell(char c, Map<Character, Room> roomMap) {
		if(c == '<' || c == '>' || c == 'v'|| c == '^') {
			this.setDirection(c);
		}
		else if(c == '#') {
			this.setLabel(true);
			//sets the room's label cell to the caller cell
			roomMap.get(this.getInitial()).setLabelCell(this);
		}
		else if(c == '*') {
			this.setRoomCenter(true);
			//sets the room's center cell to the caller cell
			roomMap.get(this.getInitial()).setCenterCell(this);
		}
		else {
			this.setSPassage(c);
		}
	}
	
public void loadLayoutConfig() throws BadConfigFormatException {
		ArrayList<String[]> boardStrings = readFile(layoutConfigFile, ",");
		numRows = boardStrings.size();
		numCols = boardStrings.get(0).length;
		grid = new BoardCell[numRows][numCols];

		// checks if every row has the same number of columns, if not, throw the
		// exception
		for (String[] eachLine : boardStrings) {
			if (eachLine.length != numCols) {
				throw new BadConfigFormatException("The layout file has wrong columns setup");
			}
		}

		for (int row = 0; row < boardStrings.size(); row++) {
			for (int col = 0; col < boardStrings.get(0).length; col++) {
				String cellLetters = boardStrings.get(row)[col];

				// check if the initial represents a room in the setup file, if not, throw the
				// exception
				if (roomMap.get(cellLetters.charAt(0)) == null) {
					throw new BadConfigFormatException("board layout refers to a room that is not in your setup file");
				}

				grid[row][col] = new BoardCell(row, col, cellLetters.charAt(0));
				// if the cell has two letters, calls the specialCell method to identify and
				// handle it.
				if (cellLetters.length() == 2) {
					grid[row][col].specialCell(cellLetters.charAt(1), roomMap);
				}
			}
		}
	}



After:
private void checkDoorAdj(BoardCell cell) {
		char room = 0;
		int row = cell.getRow();
		int col = cell.getCol();
		switch(cell.getDoorDirection()) {
			case LEFT:
				//add door to the center's adjcentList and vice versa
				room = getCell(row,col-1).getInitial();		
				break;
			case RIGHT:
				room = getCell(row,col+1).getInitial();
				break;
			case DOWN:
				room = getCell(row+1,col).getInitial();
				break;
			case UP:
				room = getCell(row-1,col).getInitial();
				break;
		}
		cell.addAdj(roomMap.get(room).getCenterCell());
		roomMap.get(room).getCenterCell().addAdj(cell);
	}
	
public void specialCell(char c, Map<Character, Room> roomMap) throws BadConfigFormatException {
		if(c == '<' || c == '>' || c == 'v'|| c == '^') {
			this.setDirection(c);
		}
		else if(c == '#') {
			this.setLabel(true);
			//sets the room's label cell to the caller cell
			roomMap.get(this.getInitial()).setLabelCell(this);
		}
		else if(c == '*') {
			this.setRoomCenter(true);
			//sets the room's center cell to the caller cell
			roomMap.get(this.getInitial()).setCenterCell(this);
		}
		else if(roomMap.get(c) == null){
			throw new BadConfigFormatException("The second letter does not represent any room in the setup file");
		}
		else {
			this.setSPassage(c);
		}
	}

public void loadLayoutConfig() throws BadConfigFormatException {
		ArrayList<String[]> boardStrings = readFile(layoutConfigFile, ",");
		numRows = boardStrings.size();
		numCols = boardStrings.get(0).length;
		grid = new BoardCell[numRows][numCols];

		// checks if every row has the same number of columns, if not, throw the
		// exception
		for (String[] eachLine : boardStrings) {
			if (eachLine.length != numCols) {
				throw new BadConfigFormatException("The layout file has wrong columns setup");
			}
		}

		validate(boardStrings);
	}

	//make sure the format is correct and construct the grid
	private void validate(ArrayList<String[]> boardStrings) throws BadConfigFormatException {
		for (int row = 0; row < boardStrings.size(); row++) {
			for (int col = 0; col < boardStrings.get(0).length; col++) {
				String cellLetters = boardStrings.get(row)[col];

				// check if the initial represents a room in the setup file, if not, throw the
				// exception
				if (roomMap.get(cellLetters.charAt(0)) == null) {
					throw new BadConfigFormatException("board layout refers to a room that is not in your setup file");
				}

				grid[row][col] = new BoardCell(row, col, cellLetters.charAt(0));
				// if the cell has two letters, calls the specialCell method to identify and
				// handle it.
				if (cellLetters.length() == 2) {
					grid[row][col].specialCell(cellLetters.charAt(1), roomMap);
				}
			}
		}
	}