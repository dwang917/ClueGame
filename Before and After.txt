before:
private void checkDoorAdj(BoardCell cell) {
		char room = 0;
		int row = cell.getRow();
		int col = cell.getCol();
		switch(cell.getDoorDirection()) {
			case LEFT:
				//add door to the center's adjcentList and vice versa
				room = getCell(row,col-1).getInitial();	
				cell.addAdj(roomMap.get(room).getCenterCell());
				roomMap.get(room).getCenterCell().addAdj(cell);	
				break;
			case RIGHT:
				room = getCell(row,col+1).getInitial();
				cell.addAdj(roomMap.get(room).getCenterCell());
				roomMap.get(room).getCenterCell().addAdj(cell);
				break;
			case DOWN:
				room = getCell(row+1,col).getInitial();
				cell.addAdj(roomMap.get(room).getCenterCell());
				roomMap.get(room).getCenterCell().addAdj(cell);
				break;
			case UP:
				room = getCell(row-1,col).getInitial();
				cell.addAdj(roomMap.get(room).getCenterCell());
				roomMap.get(room).getCenterCell().addAdj(cell);
				break;
		}
	}
	
public void specialCell(char c, Map<Character, Room> roomMap) {
		if(c == '<' || c == '>' || c == 'v'|| c == '^') {
			this.setDirection(c);
		}
		else if(c == '#') {
			this.setLabel(true);
			//sets the room's label cell to the caller cell
			roomMap.get(this.getInitial()).setLabelCell(this);
		}
		else if(c == '*') {
			this.setRoomCenter(true);
			//sets the room's center cell to the caller cell
			roomMap.get(this.getInitial()).setCenterCell(this);
		}
		else {
			this.setSPassage(c);
		}
	}
	


After:
private void checkDoorAdj(BoardCell cell) {
		char room = 0;
		int row = cell.getRow();
		int col = cell.getCol();
		switch(cell.getDoorDirection()) {
			case LEFT:
				//add door to the center's adjcentList and vice versa
				room = getCell(row,col-1).getInitial();		
				break;
			case RIGHT:
				room = getCell(row,col+1).getInitial();
				break;
			case DOWN:
				room = getCell(row+1,col).getInitial();
				break;
			case UP:
				room = getCell(row-1,col).getInitial();
				break;
		}
		cell.addAdj(roomMap.get(room).getCenterCell());
		roomMap.get(room).getCenterCell().addAdj(cell);
	}
	
public void specialCell(char c, Map<Character, Room> roomMap) throws BadConfigFormatException {
		if(c == '<' || c == '>' || c == 'v'|| c == '^') {
			this.setDirection(c);
		}
		else if(c == '#') {
			this.setLabel(true);
			//sets the room's label cell to the caller cell
			roomMap.get(this.getInitial()).setLabelCell(this);
		}
		else if(c == '*') {
			this.setRoomCenter(true);
			//sets the room's center cell to the caller cell
			roomMap.get(this.getInitial()).setCenterCell(this);
		}
		else if(roomMap.get(c) == null){
			throw new BadConfigFormatException("The second letter does not represent any room in the setup file");
		}
		else {
			this.setSPassage(c);
		}
	}